name: Database Migration Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**/migrations/**'
      - 'backend/**/models.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**/migrations/**'
      - 'backend/**/models.py'

jobs:
  migration-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=django-insecure-test-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "API_SERVER=False" >> $GITHUB_ENV
        echo "API_ENABLED=True" >> $GITHUB_ENV
        echo "WEBAPP_ENABLED=True" >> $GITHUB_ENV
        echo "WEB_ADMIN=True" >> $GITHUB_ENV
        echo "USER_REGISTRATION_ENABLED=True" >> $GITHUB_ENV
        echo "SELENIUM_ENABLED=False" >> $GITHUB_ENV

    - name: Check for migration conflicts
      run: |
        python manage.py makemigrations --check --dry-run

    - name: Validate existing migrations
      run: |
        python manage.py showmigrations

    - name: Test migration rollback
      run: |
        # create a test database
        python manage.py migrate
        
        # simulate a rollback
        python manage.py migrate --plan
        
        # rollback to the initial state
        python manage.py check --database default

    - name: Check for missing migrations
      run: |
        python manage.py makemigrations --dry-run --verbosity=2

    - name: Validate model changes
      run: |
        python manage.py check --deploy 