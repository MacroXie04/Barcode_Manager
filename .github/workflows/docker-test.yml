name: Docker Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: development
        tags: barcode-manager:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/dev-image.tar

    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        tags: barcode-manager:prod
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/prod-image.tar

    - name: Load development image
      run: docker load --input /tmp/dev-image.tar

    - name: Load production image
      run: docker load --input /tmp/prod-image.tar

    - name: Test development image
      run: |
        # create test environment variables file
        cat > backend/.env.test << EOF
        SECRET_KEY=django-insecure-test-key-for-docker
        DEBUG=True
        API_SERVER=True
        API_ENABLED=True
        WEBAPP_ENABLED=True
        WEB_ADMIN=True
        USER_REGISTRATION_ENABLED=True
        SELENIUM_ENABLED=False
        EOF

        # test development image
        docker run --rm \
          --env-file backend/.env.test \
          -v $(pwd)/backend:/app \
          barcode-manager:dev \
          python manage.py check --deploy

    - name: Test production image
      run: |
        # test production image
        docker run --rm \
          --env-file backend/.env.test \
          barcode-manager:prod \
          python manage.py check --deploy

    - name: Test Docker Compose
      run: |
        cd backend
        # start services
        docker-compose up -d db redis
        
        # wait for database to start
        sleep 10
        
        # test development environment
        docker-compose run --rm web python manage.py check --deploy
        
        # test production environment
        docker-compose run --rm web-prod python manage.py check --deploy
        
        # clean up
        docker-compose down

    - name: Test image security
      run: |
        # use Trivy to scan image security vulnerabilities
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest \
          image --severity HIGH,CRITICAL barcode-manager:prod

    - name: Test image size
      run: |
        # check image size
        DEV_SIZE=$(docker images barcode-manager:dev --format "{{.Size}}")
        PROD_SIZE=$(docker images barcode-manager:prod --format "{{.Size}}")
        
        echo "Development image size: $DEV_SIZE"
        echo "Production image size: $PROD_SIZE"
        
        # if image is too large, emit warning
        if [[ "$PROD_SIZE" =~ ^[0-9]+\.?[0-9]*G ]]; then
          echo "Warning: Production image is larger than 1GB"
        fi

    - name: Test container health
      run: |
        # start production container
        docker run -d --name test-container \
          --env-file backend/.env.test \
          -p 8000:8000 \
          barcode-manager:prod
        
        # wait for container to start
        sleep 30
        
        # check container status
        docker ps | grep test-container
        
        # test health check
        curl -f http://localhost:8000/health/ || echo "Health check failed"
        
        # clean up
        docker stop test-container
        docker rm test-container

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: |
          backend/.env.test
          /tmp/*.tar 