"""
Django settings for mobile ID project.

Generated by 'django-admin startproject' using Django 5.1.6.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from django.core.exceptions import PermissionDenied
import secrets

LOGIN_URL = '/webauthn/login/'

# Build paths inside the project like this: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable or generate a secure one
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', secrets.token_hex(32))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Restrict allowed hosts to specific domains
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'catcard.online', 'www.catcard.online']

# CORS settings
CORS_ALLOWED_ORIGINS = [
    # Vite dev server
    'http://localhost:5173',
]
CORS_ALLOW_CREDENTIALS = True

# Application definition
INSTALLED_APPS = [
    # Core mobile ID apps
    "mobileid",
    "widget_tweaks",
    "corsheaders",

    # Django Content Security Policy
    "csp",
    # Django Axes for login attempt limiting
    "axes",

    # Django REST Framework
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',

    'django_extensions',

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# Django Axes Configuration
AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list
    'axes.backends.AxesStandaloneBackend',

    # Django's default ModelBackend
    'django.contrib.auth.backends.ModelBackend',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Django Axes Settings
# Number of login attempts before lockout
AXES_FAILURE_LIMIT = 5
# Lockout time in hours
AXES_COOLOFF_TIME = 1
# Use the default lockout response
AXES_LOCKOUT_TEMPLATE = None
# No custom lockout URL
AXES_LOCKOUT_URL = None
# Reset the failure count on successful login
AXES_RESET_ON_SUCCESS = True

# Django Rate Limit Settings
RATELIMIT_VIEW = 'webauthn_app.views.rate_limit.rate_limited_error'
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_FAIL_OPEN = False  # Block requests when the cache is unavailable

ROOT_URLCONF = "ucm_barcode.urls"

CORS_ALLOW_CREDENTIALS = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "mobileid", "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ucm_barcode.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
        "ATOMIC_REQUESTS": True,  # Wrap each HTTP request in a transaction
        "CONN_MAX_AGE": 0,  # Close database connections at the end of each request
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Require at least 12 characters
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Password hashers (more secure than the default)
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True
